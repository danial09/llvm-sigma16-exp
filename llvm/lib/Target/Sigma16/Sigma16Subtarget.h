//===-- Sigma16Subtarget.h - Define Subtarget for the Sigma16 ---*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Sigma16 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_SIGMA16_SIGMA16SUBTARGET_H
#define LLVM_LIB_TARGET_SIGMA16_SIGMA16SUBTARGET_H

#include "Sigma16FrameLowering.h"
#include "Sigma16ISelLowering.h"
#include "Sigma16InstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "Sigma16GenSubtargetInfo.inc"

//@1
namespace llvm {
class StringRef;

class Sigma16TargetMachine;

class Sigma16Subtarget : public Sigma16GenSubtargetInfo {
    virtual void anchor();

protected:
    enum Sigma16ArchEnum {
        Sigma16,
    };

    // Sigma16 architecture version
    Sigma16ArchEnum Sigma16ArchVersion;

    bool EnableOverflow;

    // HasCmp - cmp instructions.
    bool HasCmp;

    // HasSlt - slt instructions.
    bool HasSlt;

    InstrItineraryData InstrItins;

    const Sigma16TargetMachine &TM;

    Triple TargetTriple;

    const SelectionDAGTargetInfo TSInfo;

    std::unique_ptr<const Sigma16InstrInfo> InstrInfo;
    std::unique_ptr<const Sigma16FrameLowering> FrameLowering;
    std::unique_ptr<const Sigma16TargetLowering> TLInfo;

public:
    bool isPositionIndependent() const;
    const Sigma16ABIInfo &getABI() const;

    /// This constructor initializes the data members to match that
    /// of the specified triple.
    Sigma16Subtarget(const Triple &TT, StringRef CPU, StringRef FS,
                     const Sigma16TargetMachine &_TM);

    ~Sigma16Subtarget() override = default;

    //- Vitual function, must have
    /// ParseSubtargetFeatures - Parses features string setting specified
    /// subtarget options.  Definition of function is auto generated by tblgen.
    void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

    bool hasSigma16() const {
        return Sigma16ArchVersion == Sigma16;
    }

    /// Features related to the presence of specific instructions.
    bool enableOverflow() const {
        return EnableOverflow;
    }
    bool disableOverflow() const {
        return !EnableOverflow;
    }
    bool hasCmp() const {
        return HasCmp;
    }
    bool hasSlt() const {
        return HasSlt;
    }

    bool abiUsesSoftFloat() const;

    bool enableLongBranchPass() const {
        return hasSigma16();
    }

    unsigned stackAlignment() const {
        return 16;
    }

    Sigma16Subtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
            const TargetMachine &TM);

    const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
        return &TSInfo;
    }
    const Sigma16InstrInfo *getInstrInfo() const override {
        return InstrInfo.get();
    }
    const TargetFrameLowering *getFrameLowering() const override {
        return FrameLowering.get();
    }
    const Sigma16RegisterInfo *getRegisterInfo() const override {
        return &InstrInfo->getRegisterInfo();
    }
    const Sigma16TargetLowering *getTargetLowering() const override {
        return TLInfo.get();
    }
    const InstrItineraryData *getInstrItineraryData() const override {
        return &InstrItins;
    }
};
} // namespace llvm

#endif

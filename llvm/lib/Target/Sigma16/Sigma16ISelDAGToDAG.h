// Sigma16ISelDAGToDAG.h - A dag to dag inst selector for Sigma16 -*- C++ -*-=//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Sigma16 target.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_SIGMA16_SIGMA16ISELDAGTODAG_H
#define LLVM_LIB_TARGET_SIGMA16_SIGMA16ISELDAGTODAG_H

#include "Sigma16.h"
#include "Sigma16Subtarget.h"
#include "Sigma16TargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Type.h"
#include "llvm/Support/Debug.h"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// Sigma16DAGToDAGISel - Sigma16 specific code to select Sigma16 machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//

static char ID = 0;

namespace llvm {

class Sigma16DAGToDAGISel : public SelectionDAGISel {
public:
  //  static char ID;

  explicit Sigma16DAGToDAGISel(Sigma16TargetMachine &TM, CodeGenOpt::Level OL)
      : SelectionDAGISel(ID, TM, OL), Subtarget(nullptr) {}

  // Pass Name
  StringRef getPassName() const override {
    return "Sigma16 DAG->DAG Pattern Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override;

protected:
  //  SDNode *getGlobalBaseReg();

  /// Keep a pointer to the Sigma16Subtarget around so that we can make the
  /// right decision when generating code for different targets.
  const Sigma16Subtarget *Subtarget;

private:
// Include the pieces autogenerated from the target description.
#include "Sigma16GenDAGISel.inc"

  const Sigma16TargetMachine &getTargetMachine() const {
    return static_cast<const Sigma16TargetMachine &>(TM);
  }

  void Select(SDNode *N) override;

  bool SelectAddr(SDValue Addr, SDValue &Base, SDValue &Offset);

  // getImm - Return a target constant with the specified value.
  inline SDValue getImm(const SDNode *Node, unsigned Imm) {
    return CurDAG->getTargetConstant(Imm, SDLoc(Node), Node->getValueType(0));
  }

  virtual bool trySelect(SDNode *N) = 0;

  virtual void processFunctionAfterISel(MachineFunction &MF) = 0;
};

// char Sigma16DAGToDAGISel::ID = 0;

} // end namespace llvm

#endif // LLVM_LIB_TARGET_SIGMA16_SIGMA16ISELDAGTODAG_H